<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Localhost]]></title>
  <link href="http://dpb1.github.io/atom.xml" rel="self"/>
  <link href="http://dpb1.github.io/"/>
  <updated>2013-09-25T15:19:42-06:00</updated>
  <id>http://dpb1.github.io/</id>
  <author>
    <name><![CDATA[David Britton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ps3 sixaxis controller + ubuntu = fun]]></title>
    <link href="http://dpb1.github.io/blog/2013/09/25/ps3-sixaxis-controller-plus-ubuntu-equals-fun/"/>
    <updated>2013-09-25T13:50:00-06:00</updated>
    <id>http://dpb1.github.io/blog/2013/09/25/ps3-sixaxis-controller-plus-ubuntu-equals-fun</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p><img class="center" src="images/game-room.jpg" title="Overboard" ></p>

<p>I like this room.  But well, It&rsquo;s just not for me.  Instead I like playing old
games with emulators, like <a href="http://www.zsnes.com/">zsnes</a> (Super
Nintendo) or <a href="http://mamedev.org">MAME</a> (Arcade) or even <a
href="http://www.dolphin-emulator.com/">dolphin</a> (Gamecube).</p>

<p>Honestly, Ubuntu has been a first class citizen with many emulators
for some time now.  I think the idea of a free operating system running
mutliple console platforms on commodity hardware just has a certain
nerd-charm, so the platform has recieved a lot of attention from emulator
writers.  But to get a true console/arcade experience you need to move beyond the
keyboard &hellip; to a gamepad of some kind.</p>

<p>Admit it: arcade and console games are more fun to play with a gamepad.
Usually the system-specifc controller is the best, but a good one like the
sixaxis controller, or the xbox controller are reasonable substitutes for the
platform native varieties.  You can get close to that picture without being the
guy in that picture.</p>

<p>10 years ago, Linux distributions were downright awful at using gamepads.
Given <a href="http://www.motioninjoy.com/download">how hard and adware ridden</a>
this process can be in other operating systems, I really wasn&rsquo;t looking
forward to configuring my gamepad on Ubuntu today.</p>

<h2>The Solution</h2>

<p>My, how the landscape has changed with Ubuntu.  To set up a <a
href="https://en.wikipedia.org/wiki/Sixaxis">Sixaxis</a> controller under
Ubuntu, follow the steps below:</p>

<ol>
<li>Plugin your sixaxis controller over USB and press the <code>PS</code> button.</li>
</ol>


<p>Yes folks, that is it.  I put in a single list item to illustrate how poor my
writing skills are and how easy this process is.</p>

<h2>Reality Check</h2>

<p>Now that your head is spinning from awe of how easy things have become in
Ubuntu, it&rsquo;s time to temper that elation with some facts.  Things don&rsquo;t always
go right.  Your needs maybe different than mine, and your controller may not
work right away in exactly the way you want it to.  So, I thought a small
section on tips and configuration might be in order.</p>

<p>Let&rsquo;s test that controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install joystick
</span><span class='line'>sudo tail -f /var/log/syslog    <span class="c"># In one window</span>
</span><span class='line'>jstest /dev/input/js0           <span class="c"># In another window (once you plug in)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If things are going right, when you plugin the controller you will see output like this in your syslog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  205.732300<span class="o">]</span> usb 2-1.2: new full-speed USB device number 4 using ehci-pci
</span><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  205.866723<span class="o">]</span> usb 2-1.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>054c, <span class="nv">idProduct</span><span class="o">=</span>0268
</span><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  205.866738<span class="o">]</span> usb 2-1.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span>0
</span><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  205.866747<span class="o">]</span> usb 2-1.2: Product: PLAYSTATION<span class="o">(</span>R<span class="o">)</span>3 Controller
</span><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  205.866755<span class="o">]</span> usb 2-1.2: Manufacturer: Sony
</span><span class='line'>Sep 25 20:45:43 starbuck mtp-probe: checking bus 2, device 4: <span class="s2">&quot;/sys/devices/pci0000:00/0000:00:1d.7/usb2/2-1/2-1.2&quot;</span>
</span><span class='line'>Sep 25 20:45:43 starbuck mtp-probe: bus: 2, device: 4 was not an MTP device
</span><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  206.045910<span class="o">]</span> sony 0003:054C:0268.0005: Fixing up Sony Sixaxis report descriptor
</span><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  206.089500<span class="o">]</span> input: Sony PLAYSTATION<span class="o">(</span>R<span class="o">)</span>3 Controller as /devices/pci0000:00/0000:00:1d.7/usb2/2-1/2-1.2/2-1.2:1.0/input/input14
</span><span class='line'>Sep 25 20:45:43 starbuck kernel: <span class="o">[</span>  206.093696<span class="o">]</span> sony 0003:054C:0268.0005: input,hiddev0,hidraw2: USB HID v1.11 Joystick <span class="o">[</span>Sony PLAYSTATION<span class="o">(</span>R<span class="o">)</span>3 Controller<span class="o">]</span> on usb-0000:00:1d.7-1.2/input0
</span><span class='line'>S
</span></code></pre></td></tr></table></div></figure>


<p>Now, run the <code>jstest /dev/input/js0</code> command.  When you press the buttons, you
should see numbers changing on your screen.  When I first did this, I did not.
It turns out I had to <a
href="https://support.us.playstation.com/app/answers/detail/a_id/444/~/troubleshoot-dualshock-3%2Fsixaxis-controllers">reset
the controller to factory defaults</a>, and everything worked fine after that
(paperclip-sized-hole underneath the controller close to the left trigger
buttons).</p>

<p>Do you want some lower-level configuration?  If you are running a sixaxis
controller on Ubutnu, you just might be that type of person.  Go checkout the
<a href="https://help.ubuntu.com/community/Sixaxis">Ubuntu Sixaxis page</a>,
which talks about how to pair the device over bluetooth, even how to use the
really cool QTSixA tool.</p>

<p>But enough of reality, if you have /dev/input/js0 and jstest works, you are
golden.  All your games and emulators should now &ldquo;just work&rdquo;.</p>

<p>Thanks Ubuntu developers and community, and happy gaming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bashing Your Head In: Local is a Command]]></title>
    <link href="http://dpb1.github.io/blog/2013/09/24/bashing-your-head-in-dangers-of-local-and-status/"/>
    <updated>2013-09-24T16:01:00-06:00</updated>
    <id>http://dpb1.github.io/blog/2013/09/24/bashing-your-head-in-dangers-of-local-and-status</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bash</a> has a major
conceptional drawback.  No, I&rsquo;m not talking about odd syntax, overuse of
whitespace delimiters or even the slow performance.  Nearly everything in the
language is a command.  Bash works really well for executing simple Unix
commands, parsing the output, and acting on their return codes, but it
sometimes returns confusing results when you fail to remember that it&rsquo;s own
builtin commands use this same system for reporting output and results.</p>

<p>For instance, this bit of code is a clean (even if contrived) way to parse a
syslog file for all executions of the CRON subsystem on Ubuntu.  Quick and
readable, runnable at the command line, and just makes sense:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">output</span><span class="o">=</span><span class="sb">`</span>cat /var/log/syslog | grep CRON | wc -l<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Found $output cron log line(s)&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;No cron log lines found&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that I am capturing the output of that command into a variable named
<code>output</code>.  Ideally, you would want that output variable to be local, since
output is a common word, and you could be trampling on some other code in a
sourced file, or even in your own file.  So, let&rsquo;s do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">local </span><span class="nv">output</span><span class="o">=</span><span class="sb">`</span>cat /var/log/syslog | grep CRON | wc -l<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>There!  All fixed.  Except, it&rsquo;s not.  You probably see the problem, the local
builtin is actually a command whose status is evaluated after the execution of
your log parsing.  Since <code>local output</code> will succeed in pretty much every case,
the result of the last command (<code>$?</code>) will always evaluate to 0.</p>

<p>The best practice is always to</p>

<ol>
<li> Use Local variables</li>
<li> Declare local variables on their own line</li>
</ol>


<p>So our silly example becomes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">local </span>output
</span><span class='line'><span class="nv">output</span><span class="o">=</span><span class="sb">`</span>cat /var/log/syslog | grep CRON | wc -l<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Found $output cron log line(s)&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;No cron log lines found&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Happy Bashing!</p>
]]></content>
  </entry>
  
</feed>
